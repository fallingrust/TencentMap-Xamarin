com/tencent/map/geolocation/internal/TencentExtraKeys = Com.Tencent.Map.Geolocation.Internal.TencentExtraKeys
  <init>()V = .ctor()
  ALLOW_NLP_LOCATION = AllowNlpLocation
  LOCATION_KEY_ADMIN_LEVEL1 = LocationKeyAdminLevel1
  LOCATION_KEY_ADMIN_LEVEL2 = LocationKeyAdminLevel2
  LOCATION_KEY_ADMIN_LEVEL3 = LocationKeyAdminLevel3
  LOCATION_KEY_LOCALITY = LocationKeyLocality
  LOCATION_KEY_NATION = LocationKeyNation
  LOCATION_KEY_ROUTE = LocationKeyRoute
  LOCATION_KEY_SUBLOCALITY = LocationKeySublocality
  LOCATION_SOURCE_CELL = LocationSourceCell
  LOCATION_SOURCE_GPS = LocationSourceGps
  LOCATION_SOURCE_WIFI = LocationSourceWifi
  MOCK_LOCATION_FILTER = MockLocationFilter
  RAW_DATA = RawData
  REQUEST_RAW_DATA = RequestRawData
  STRICT_CELL_FILTER = StrictCellFilter
  TENCENT_INTERNAL = TencentInternal
  isDebugEnabled()Z = IsDebugEnabled
  isTencentExtraKeysDIDI_INTERNAL()Z = IsTencentExtraKeysDIDI_INTERNAL
  isTencentExtraKeysTENCENT_INTERNAL()Z = IsTencentExtraKeysTENCENT_INTERNAL
  getLogDir()Ljava/io/File; = LogDir
  setLogDir(Ljava/io/File;)V = LogDir
  enableMockLocationFilter(Z)V = EnableMockLocationFilter(bool)
  getLocationSource(Lcom/tencent/map/geolocation/TencentLocation;)Ljava/lang/String; = GetLocationSource(Com.Tencent.Map.Geolocation.ITencentLocation)
  getRawData(Lcom/tencent/map/geolocation/TencentLocation;)[B = GetRawData(Com.Tencent.Map.Geolocation.ITencentLocation)
  getRawGps(Lcom/tencent/map/geolocation/TencentLocation;)Landroid/location/Location; = GetRawGps(Com.Tencent.Map.Geolocation.ITencentLocation)
  getRawQuery(Lcom/tencent/map/geolocation/TencentLocation;)Ljava/lang/String; = GetRawQuery(Com.Tencent.Map.Geolocation.ITencentLocation)
  initSdkLog(Landroid/content/Context;Ljava/io/File;)V = InitSdkLog(Android.Content.Context, Java.IO.File)
  isAllowedLevel(I)Z = IsAllowedLevel(int)
  isInsIllegalApp(Landroid/content/Context;)I = IsInsIllegalApp(Android.Content.Context)
  isRequestRawData(Lcom/tencent/map/geolocation/TencentLocationRequest;)Z = IsRequestRawData(Com.Tencent.Map.Geolocation.TencentLocationRequest)
  loadLibrary(Ljava/lang/String;)V = LoadLibrary(string)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setRawData(Lcom/tencent/map/geolocation/TencentLocation;[B)Lcom/tencent/map/geolocation/TencentLocation; = SetRawData(Com.Tencent.Map.Geolocation.ITencentLocation, byte[])
  setRawGps(Lcom/tencent/map/geolocation/TencentLocation;Landroid/location/Location;)V = SetRawGps(Com.Tencent.Map.Geolocation.ITencentLocation, Android.Locations.Location)
  setRawQuery(Lcom/tencent/map/geolocation/TencentLocation;Ljava/lang/String;)V = SetRawQuery(Com.Tencent.Map.Geolocation.ITencentLocation, string)
  setRequestRawData(Lcom/tencent/map/geolocation/TencentLocationRequest;Z)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetRequestRawData(Com.Tencent.Map.Geolocation.TencentLocationRequest, bool)
  wgs84ToGcj02([D[D)Z = Wgs84ToGcj02(double[], double[])
com/tencent/map/geolocation/TencentGeofence = Com.Tencent.Map.Geolocation.TencentGeofence
  getDuration()J = Duration
  getExpireAt()J = ExpireAt
  getLatitude()D = Latitude
  getLongitude()D = Longitude
  getRadius()F = Radius
  getTag()Ljava/lang/String; = Tag
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  toString()Ljava/lang/String; = ToString()
com/tencent/map/geolocation/TencentGeofenceManager = Com.Tencent.Map.Geolocation.TencentGeofenceManager
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  addFence(Lcom/tencent/map/geolocation/TencentGeofence;Landroid/app/PendingIntent;)V = AddFence(Com.Tencent.Map.Geolocation.TencentGeofence, Android.App.PendingIntent)
  destroy()V = Destroy()
  removeAllFences()V = RemoveAllFences()
  removeFence(Lcom/tencent/map/geolocation/TencentGeofence;)V = RemoveFence(Com.Tencent.Map.Geolocation.TencentGeofence)
  removeFence(Ljava/lang/String;)V = RemoveFence(string)
com/tencent/map/geolocation/TencentLocation = Com.Tencent.Map.Geolocation.ITencentLocation
  ERROR_BAD_JSON = ErrorBadJson
  ERROR_NETWORK = ErrorNetwork
  ERROR_OK = ErrorOk
  ERROR_UNKNOWN = ErrorUnknown
  ERROR_WGS84 = ErrorWgs84
  EXTRA_ADDRDESP_LANDMARK = ExtraAddrdespLandmark
  EXTRA_ADDRDESP_OTHERS_RESULTS = ExtraAddrdespOthersResults
  EXTRA_ADDRDESP_SECOND_LANDMARK = ExtraAddrdespSecondLandmark
  EXTRA_DIRECTION = ExtraDirection
  EXTRA_RESP_JSON = ExtraRespJson
  GPS_PROVIDER = GpsProvider
  NETWORK_PROVIDER = NetworkProvider
  getAccuracy()F = Accuracy
  getAddress()Ljava/lang/String; = Address
  getAltitude()D = Altitude
  getAreaStat()Ljava/lang/Integer; = AreaStat
  getBearing()F = Bearing
  getCity()Ljava/lang/String; = City
  getCityCode()Ljava/lang/String; = CityCode
  getCityPhoneCode()Ljava/lang/String; = CityPhoneCode
  getCoordinateType()I = CoordinateType
  getDirection()D = Direction
  getDistrict()Ljava/lang/String; = District
  getElapsedRealtime()J = ElapsedRealtime
  getExtra()Landroid/os/Bundle; = Extra
  getGPSRssi()I = GPSRssi
  getIndoorBuildingFloor()Ljava/lang/String; = IndoorBuildingFloor
  getIndoorBuildingId()Ljava/lang/String; = IndoorBuildingId
  getIndoorLocationType()I = IndoorLocationType
  getLatitude()D = Latitude
  getLongitude()D = Longitude
  getName()Ljava/lang/String; = Name
  getNation()Ljava/lang/String; = Nation
  getPoiList()Ljava/util/List; = PoiList
  getProvider()Ljava/lang/String; = Provider
  getProvince()Ljava/lang/String; = Province
  getSpeed()F = Speed
  getStreet()Ljava/lang/String; = Street
  getStreetNo()Ljava/lang/String; = StreetNo
  getTime()J = Time
  getTown()Ljava/lang/String; = Town
  getVillage()Ljava/lang/String; = Village
  isMockGps()I = IsMockGps()
com/tencent/map/geolocation/TencentLocationListener = Com.Tencent.Map.Geolocation.ITencentLocationListener
  CELL = Cell
  GPS = Gps
  RADIO = Radio
  STATUS_DENIED = StatusDenied
  STATUS_DISABLED = StatusDisabled
  STATUS_ENABLED = StatusEnabled
  STATUS_GPS_AVAILABLE = StatusGpsAvailable
  STATUS_GPS_UNAVAILABLE = StatusGpsUnavailable
  STATUS_LOCATION_SWITCH_OFF = StatusLocationSwitchOff
  STATUS_UNKNOWN = StatusUnknown
  WIFI = Wifi
  onLocationChanged(Lcom/tencent/map/geolocation/TencentLocation;ILjava/lang/String;)V = OnLocationChanged(Com.Tencent.Map.Geolocation.ITencentLocation, int, string)
  onStatusUpdate(Ljava/lang/String;ILjava/lang/String;)V = OnStatusUpdate(string, int, string)
com/tencent/map/geolocation/TencentLocationManager = Com.Tencent.Map.Geolocation.TencentLocationManager
  COORDINATE_TYPE_GCJ02 = CoordinateTypeGcj02
  COORDINATE_TYPE_WGS84 = CoordinateTypeWgs84
  getBuild()Ljava/lang/String; = Build
  getCoordinateType()I = CoordinateType
  setCoordinateType(I)V = CoordinateType
  getLastKnownLocation()Lcom/tencent/map/geolocation/TencentLocation; = LastKnownLocation
  getVersion()Ljava/lang/String; = Version
  disableForegroundLocation(Z)V = DisableForegroundLocation(bool)
  enableForegroundLocation(ILandroid/app/Notification;)V = EnableForegroundLocation(int, Android.App.Notification)
  getInstance(Landroid/content/Context;)Lcom/tencent/map/geolocation/TencentLocationManager; = GetInstance(Android.Content.Context)
  removeUpdates(Lcom/tencent/map/geolocation/TencentLocationListener;)V = RemoveUpdates(Com.Tencent.Map.Geolocation.ITencentLocationListener)
  requestLocationUpdates(Lcom/tencent/map/geolocation/TencentLocationRequest;Lcom/tencent/map/geolocation/TencentLocationListener;)I = RequestLocationUpdates(Com.Tencent.Map.Geolocation.TencentLocationRequest, Com.Tencent.Map.Geolocation.ITencentLocationListener)
  requestLocationUpdates(Lcom/tencent/map/geolocation/TencentLocationRequest;Lcom/tencent/map/geolocation/TencentLocationListener;Landroid/os/Looper;)I = RequestLocationUpdates(Com.Tencent.Map.Geolocation.TencentLocationRequest, Com.Tencent.Map.Geolocation.ITencentLocationListener, Android.OS.Looper)
  requestSingleFreshLocation(Lcom/tencent/map/geolocation/TencentLocationRequest;Lcom/tencent/map/geolocation/TencentLocationListener;Landroid/os/Looper;)I = RequestSingleFreshLocation(Com.Tencent.Map.Geolocation.TencentLocationRequest, Com.Tencent.Map.Geolocation.ITencentLocationListener, Android.OS.Looper)
  setDebuggable(Z)V = SetDebuggable(bool)
  startIndoorLocation()Z = StartIndoorLocation()
  stopIndoorLocation()Z = StopIndoorLocation()
  triggerCodeGuarder(Z)V = TriggerCodeGuarder(bool)
com/tencent/map/geolocation/TencentLocationManagerOptions = Com.Tencent.Map.Geolocation.TencentLocationManagerOptions
  <init>()V = .ctor()
  getKey()Ljava/lang/String; = Key
  isLoadLibraryEnabled()Z = LoadLibraryEnabled
  setLoadLibraryEnabled(Z)V = LoadLibraryEnabled
  setKey(Ljava/lang/String;)Z = SetKey(string)
com/tencent/map/geolocation/TencentLocationRequest = Com.Tencent.Map.Geolocation.TencentLocationRequest
  <init>(Lcom/tencent/map/geolocation/TencentLocationRequest;)V = .ctor(Com.Tencent.Map.Geolocation.TencentLocationRequest)
  REQUEST_LEVEL_ADMIN_AREA = RequestLevelAdminArea
  REQUEST_LEVEL_GEO = RequestLevelGeo
  REQUEST_LEVEL_NAME = RequestLevelName
  REQUEST_LEVEL_POI = RequestLevelPoi
  getExtras()Landroid/os/Bundle; = Extras
  getInterval()J = Interval
  isAllowCache()Z = IsAllowCache
  isAllowDirection()Z = IsAllowDirection
  isAllowGPS()Z = IsAllowGPS
  isIndoorLocationMode()Z = IsIndoorLocationMode
  getPhoneNumber()Ljava/lang/String; = PhoneNumber
  getQQ()Ljava/lang/String; = QQ
  getRequestLevel()I = RequestLevel
  getSmallAppKey()Ljava/lang/String; = SmallAppKey
  copy(Lcom/tencent/map/geolocation/TencentLocationRequest;Lcom/tencent/map/geolocation/TencentLocationRequest;)V = Copy(Com.Tencent.Map.Geolocation.TencentLocationRequest, Com.Tencent.Map.Geolocation.TencentLocationRequest)
  create()Lcom/tencent/map/geolocation/TencentLocationRequest; = Create()
  setAllowCache(Z)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetAllowCache(bool)
  setAllowDirection(Z)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetAllowDirection(bool)
  setAllowGPS(Z)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetAllowGPS(bool)
  setIndoorLocationMode(Z)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetIndoorLocationMode(bool)
  setInterval(J)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetInterval(long)
  setPhoneNumber(Ljava/lang/String;)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetPhoneNumber(string)
  setQQ(Ljava/lang/String;)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetQQ(string)
  setRequestLevel(I)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetRequestLevel(int)
  setSmallAppKey(Ljava/lang/String;)Lcom/tencent/map/geolocation/TencentLocationRequest; = SetSmallAppKey(string)
  toString()Ljava/lang/String; = ToString()
com/tencent/map/geolocation/TencentLocationUtils = Com.Tencent.Map.Geolocation.TencentLocationUtils
  contains(Lcom/tencent/map/geolocation/TencentLocation;DLcom/tencent/map/geolocation/TencentLocation;)Z = Contains(Com.Tencent.Map.Geolocation.ITencentLocation, double, Com.Tencent.Map.Geolocation.ITencentLocation)
  distanceBetween(Lcom/tencent/map/geolocation/TencentLocation;Lcom/tencent/map/geolocation/TencentLocation;)D = DistanceBetween(Com.Tencent.Map.Geolocation.ITencentLocation, Com.Tencent.Map.Geolocation.ITencentLocation)
  distanceBetween(DDDD)D = DistanceBetween(double, double, double, double)
  isFromGps(Lcom/tencent/map/geolocation/TencentLocation;)Z = IsFromGps(Com.Tencent.Map.Geolocation.ITencentLocation)
  isFromNetwork(Lcom/tencent/map/geolocation/TencentLocation;)Z = IsFromNetwork(Com.Tencent.Map.Geolocation.ITencentLocation)
  isSupportGps(Landroid/content/Context;)Z = IsSupportGps(Android.Content.Context)
  wgs84ToGcj02([D[D)Z = Wgs84ToGcj02(double[], double[])
com/tencent/map/geolocation/TencentPoi = Com.Tencent.Map.Geolocation.ITencentPoi
  getAddress()Ljava/lang/String; = Address
  getCatalog()Ljava/lang/String; = Catalog
  getDirection()Ljava/lang/String; = Direction
  getDistance()D = Distance
  getLatitude()D = Latitude
  getLongitude()D = Longitude
  getName()Ljava/lang/String; = Name
  getUid()Ljava/lang/String; = Uid
com/tencent/map/geolocation/util/DateUtils = Com.Tencent.Map.Geolocation.Util.DateUtils
  <init>()V = .ctor()
  bbb08788c45327527041933a3f54c56b(JJ)Z = Bbb08788c45327527041933a3f54c56b(long, long)
  f2593e4de50dde6467f44b48c4b8180d()J = F2593e4de50dde6467f44b48c4b8180d()
com/tencent/map/geolocation/util/Files = Com.Tencent.Map.Geolocation.Util.Files
  <init>()V = .ctor()
  append([BLjava/io/File;)V = Append(byte[], Java.IO.File)
  append(Ljava/lang/CharSequence;Ljava/io/File;Ljava/nio/charset/Charset;)V = Append(Java.Lang.ICharSequence, Java.IO.File, Java.Nio.Charset.Charset)
  fun_fe7b2b264010df956d4b71eefd61ddcd(Landroid/content/Context;)[B = Fun_fe7b2b264010df956d4b71eefd61ddcd(Android.Content.Context)
  readLines(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/util/List; = ReadLines(Java.IO.File, Java.Nio.Charset.Charset)
  toByteArray(Ljava/io/File;)[B = ToByteArray(Java.IO.File)
  toString(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/lang/String; = ToString(Java.IO.File, Java.Nio.Charset.Charset)
  write([BLjava/io/File;)V = Write(byte[], Java.IO.File)
  write(Ljava/lang/CharSequence;Ljava/io/File;Ljava/nio/charset/Charset;)V = Write(Java.Lang.ICharSequence, Java.IO.File, Java.Nio.Charset.Charset)
com/tencent/map/geolocation/util/SoUtils = Com.Tencent.Map.Geolocation.Util.SoUtils
  <init>()V = .ctor()
  fun_b(II[D)V = Fun_b(int, int, double[])
  fun_d(Ljava/lang/String;)Ljava/lang/String; = Fun_d(string)
  fun_o([BI)I = Fun_o(byte[], int)
  fun_r(DII)D = Fun_r(double, int, int)
  fun_v(Ljava/lang/String;)I = Fun_v(string)
  fun_w(Ljava/lang/String;Ljava/lang/String;)I = Fun_w(string, string)
  fun_x(Z)V = Fun_x(bool)
com/tencent/mapsdk/raster/model/BitmapDescriptor = Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor
  <init>(Landroid/graphics/Bitmap;)V = .ctor(Android.Graphics.Bitmap)
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  getHeight()I = Height
  getWidth()I = Width
  clone()Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = Clone()
com/tencent/mapsdk/raster/model/BitmapDescriptorFactory = Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptorFactory
  <init>()V = .ctor()
  defaultMarker()Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = DefaultMarker()
  fromAsset(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromAsset(string)
  fromBitmap(Landroid/graphics/Bitmap;)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromBitmap(Android.Graphics.Bitmap)
  fromFile(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromFile(string)
  fromPath(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromPath(string)
  fromResource(I)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromResource(int)
  fromView(Landroid/view/View;)Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = FromView(Android.Views.View)
com/tencent/mapsdk/raster/model/CameraPosition = Com.Tencent.Mapsdk.Raster.Model.CameraPosition
  <init>(Lcom/tencent/mapsdk/raster/model/LatLng;F)V = .ctor(Com.Tencent.Mapsdk.Raster.Model.LatLng, float)
  CREATOR = Creator
  getTarget()Lcom/tencent/mapsdk/raster/model/LatLng; = Target
  getZoom()F = Zoom
  describeContents()I = DescribeContents()
  fromLatLngZoom(Lcom/tencent/mapsdk/raster/model/LatLng;F)Lcom/tencent/mapsdk/raster/model/CameraPosition; = FromLatLngZoom(Com.Tencent.Mapsdk.Raster.Model.LatLng, float)
  builder()Lcom/tencent/mapsdk/raster/model/CameraPosition$Builder; = InvokeBuilder()
  builder(Lcom/tencent/mapsdk/raster/model/CameraPosition;)Lcom/tencent/mapsdk/raster/model/CameraPosition$Builder; = InvokeBuilder(Com.Tencent.Mapsdk.Raster.Model.CameraPosition)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/tencent/mapsdk/raster/model/Circle = Com.Tencent.Mapsdk.Raster.Model.Circle
  getCenter()Lcom/tencent/mapsdk/raster/model/LatLng; = Center
  setCenter(Lcom/tencent/mapsdk/raster/model/LatLng;)V = Center
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getId()Ljava/lang/String; = Id
  getRadius()D = Radius
  setRadius(D)V = Radius
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeDash()Z = StrokeDash
  setStrokeDash(Z)V = StrokeDash
  getStrokeDashPathEffect()Landroid/graphics/DashPathEffect; = StrokeDashPathEffect
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  contains(Lcom/tencent/mapsdk/raster/model/LatLng;)Z = Contains(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  strokeDashPathEffect(Landroid/graphics/DashPathEffect;)V = InvokeStrokeDashPathEffect(Android.Graphics.DashPathEffect)
  remove()V = Remove()
com/tencent/mapsdk/raster/model/CircleOptions = Com.Tencent.Mapsdk.Raster.Model.CircleOptions
  <init>()V = .ctor()
  getCenter()Lcom/tencent/mapsdk/raster/model/LatLng; = Center
  getFillColor()I = FillColor
  isVisible()Z = IsVisible
  getRadius()D = Radius
  getStrokeColor()I = StrokeColor
  getStrokeDash()Z = StrokeDash
  getStrokeDashPathEffect()Landroid/graphics/DashPathEffect; = StrokeDashPathEffect
  getStrokeWidth()F = StrokeWidth
  getZIndex()F = ZIndex
  describeContents()I = DescribeContents()
  center(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeCenter(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  fillColor(I)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeFillColor(int)
  radius(D)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeRadius(double)
  strokeColor(I)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeStrokeColor(int)
  strokeDash(Z)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeStrokeDash(bool)
  strokeDashPathEffect(Landroid/graphics/DashPathEffect;)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeStrokeDashPathEffect(Android.Graphics.DashPathEffect)
  strokeWidth(F)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeStrokeWidth(float)
  zIndex(F)Lcom/tencent/mapsdk/raster/model/CircleOptions; = InvokeZIndex(float)
  visible(Z)Lcom/tencent/mapsdk/raster/model/CircleOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, int)
com/tencent/mapsdk/raster/model/GeoPoint = Com.Tencent.Mapsdk.Raster.Model.GeoPoint
  <init>(II)V = .ctor(int, int)
  CREATOR = Creator
  getLatitudeE6()I = LatitudeE6
  setLatitudeE6(I)V = LatitudeE6
  getLongitudeE6()I = LongitudeE6
  setLongitudeE6(I)V = LongitudeE6
  Copy()Lcom/tencent/mapsdk/raster/model/GeoPoint; = Copy()
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/tencent/mapsdk/raster/model/GroundOverlay = Com.Tencent.Mapsdk.Raster.Model.GroundOverlay
  getBearing()F = Bearing
  setBearing(F)V = Bearing
  getBounds()Lcom/tencent/mapsdk/raster/model/LatLngBounds; = Bounds
  getHeight()F = Height
  getId()Ljava/lang/String; = Id
  getPosition()Lcom/tencent/mapsdk/raster/model/LatLng; = Position
  setPosition(Lcom/tencent/mapsdk/raster/model/LatLng;)V = Position
  getTransparency()F = Transparency
  setTransparency(F)V = Transparency
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getWidth()F = Width
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  remove()V = Remove()
  setAnchor(FF)V = SetAnchor(float, float)
  setDimensions(F)V = SetDimensions(float)
  setDimensions(FF)V = SetDimensions(float, float)
  setImage(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;)V = SetImage(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor)
  setPositionFromBounds(Lcom/tencent/mapsdk/raster/model/LatLngBounds;)V = SetPositionFromBounds(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
com/tencent/mapsdk/raster/model/GroundOverlayOptions = Com.Tencent.Mapsdk.Raster.Model.GroundOverlayOptions
  <init>()V = .ctor()
  <init>(ILandroid/os/IBinder;Lcom/tencent/mapsdk/raster/model/LatLng;FFLcom/tencent/mapsdk/raster/model/LatLngBounds;FFZFFF)V = .ctor(int, Android.OS.IBinder, Com.Tencent.Mapsdk.Raster.Model.LatLng, float, float, Com.Tencent.Mapsdk.Raster.Model.LatLngBounds, float, float, bool, float, float, float)
  getAnchorU()F = AnchorU
  getAnchorV()F = AnchorV
  getBearing()F = Bearing
  getBounds()Lcom/tencent/mapsdk/raster/model/LatLngBounds; = Bounds
  getHeight()F = Height
  getImage()Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = Image
  isVisible()Z = IsVisible
  getLocation()Lcom/tencent/mapsdk/raster/model/LatLng; = Location
  getTransparency()F = Transparency
  getWidth()F = Width
  getZIndex()F = ZIndex
  anchor(FF)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = Anchor(float, float)
  bearing(F)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = InvokeBearing(float)
  image(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = InvokeImage(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor)
  transparency(F)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = InvokeTransparency(float)
  zIndex(F)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = InvokeZIndex(float)
  position(Lcom/tencent/mapsdk/raster/model/LatLng;F)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = Position(Com.Tencent.Mapsdk.Raster.Model.LatLng, float)
  position(Lcom/tencent/mapsdk/raster/model/LatLng;FF)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = Position(Com.Tencent.Mapsdk.Raster.Model.LatLng, float, float)
  positionFromBounds(Lcom/tencent/mapsdk/raster/model/LatLngBounds;)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = PositionFromBounds(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
  putGroundOverlayOptions(Lcom/tencent/mapsdk/raster/model/LatLng;FF)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = PutGroundOverlayOptions(Com.Tencent.Mapsdk.Raster.Model.LatLng, float, float)
  visible(Z)Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions; = Visible(bool)
com/tencent/mapsdk/raster/model/IOverlay = Com.Tencent.Mapsdk.Raster.Model.IOverlay
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  remove()V = Remove()
com/tencent/mapsdk/raster/model/LatLng = Com.Tencent.Mapsdk.Raster.Model.LatLng
  <init>(DD)V = .ctor(double, double)
  getLatitude()D = Latitude
  getLongitude()D = Longitude
  clone()Lcom/tencent/mapsdk/raster/model/LatLng; = Clone()
com/tencent/mapsdk/raster/model/LatLngBounds = Com.Tencent.Mapsdk.Raster.Model.LatLngBounds
  <init>(Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;)V = .ctor(Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng)
  getNortheast()Lcom/tencent/mapsdk/raster/model/LatLng; = Northeast
  getSouthwest()Lcom/tencent/mapsdk/raster/model/LatLng; = Southwest
  contains(Lcom/tencent/mapsdk/raster/model/LatLng;)Z = Contains(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  contains(Lcom/tencent/mapsdk/raster/model/LatLngBounds;)Z = Contains(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
  including(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/LatLngBounds; = Including(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  intersects(Lcom/tencent/mapsdk/raster/model/LatLngBounds;)Z = Intersects(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
  builder()Lcom/tencent/mapsdk/raster/model/LatLngBounds$Builder; = InvokeBuilder()
com/tencent/mapsdk/raster/model/Marker = Com.Tencent.Mapsdk.Raster.Model.Marker
  getAlpha()F = Alpha
  setAlpha(F)V = Alpha
  isDraggable()Z = Draggable
  setDraggable(Z)V = Draggable
  getId()Ljava/lang/String; = Id
  isInfoWindowShown()Z = IsInfoWindowShown
  getMarkerView()Landroid/view/View; = MarkerView
  setMarkerView(Landroid/view/View;)V = MarkerView
  getPosition()Lcom/tencent/mapsdk/raster/model/LatLng; = Position
  setPosition(Lcom/tencent/mapsdk/raster/model/LatLng;)V = Position
  getRotation()F = Rotation
  setRotation(F)V = Rotation
  getSnippet()Ljava/lang/String; = Snippet
  setSnippet(Ljava/lang/String;)V = Snippet
  getTag()Ljava/lang/Object; = Tag
  setTag(Ljava/lang/Object;)V = Tag
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  hideInfoWindow()V = HideInfoWindow()
  remove()V = Remove()
  set2Top()V = Set2Top()
  setAnchor(FF)V = SetAnchor(float, float)
  setIcon(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;)V = SetIcon(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor)
  setInfoWindowHideAnimation(Landroid/view/animation/Animation;)V = SetInfoWindowHideAnimation(Android.Views.Animations.Animation)
  setInfoWindowShowAnimation(Landroid/view/animation/Animation;)V = SetInfoWindowShowAnimation(Android.Views.Animations.Animation)
  showInfoWindow()V = ShowInfoWindow()
com/tencent/mapsdk/raster/model/MarkerOptions = Com.Tencent.Mapsdk.Raster.Model.MarkerOptions
  <init>()V = .ctor()
  id = Id
  getAlpha()F = Alpha
  getAnchorU()F = AnchorU
  getAnchorV()F = AnchorV
  getHidingAnination()Landroid/view/animation/Animation; = HidingAnination
  getIcon()Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = Icon
  getInfoWindowHideAnimation()Landroid/view/animation/Animation; = InfoWindowHideAnimation
  getInfoWindowShowAnimation()Landroid/view/animation/Animation; = InfoWindowShowAnimation
  isDraggable()Z = IsDraggable
  isGps()Z = IsGps
  isVisible()Z = IsVisible
  getMarkerView()Landroid/view/View; = MarkerView
  getPosition()Lcom/tencent/mapsdk/raster/model/LatLng; = Position
  getRotation()F = Rotation
  getShowingAnination()Landroid/view/animation/Animation; = ShowingAnination
  getSnippet()Ljava/lang/String; = Snippet
  getTag()Ljava/lang/Object; = Tag
  getTitle()Ljava/lang/String; = Title
  anchor(FF)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = Anchor(float, float)
  draggable(Z)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = Draggable(bool)
  alpha(F)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeAlpha(float)
  icon(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeIcon(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor)
  infoWindowHideAnimation(Landroid/view/animation/Animation;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeInfoWindowHideAnimation(Android.Views.Animations.Animation)
  infoWindowShowAnimation(Landroid/view/animation/Animation;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeInfoWindowShowAnimation(Android.Views.Animations.Animation)
  markerView(Landroid/view/View;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeMarkerView(Android.Views.View)
  position(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokePosition(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  rotation(F)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeRotation(float)
  snippet(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeSnippet(string)
  tag(Ljava/lang/Object;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeTag(Java.Lang.Object)
  title(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = InvokeTitle(string)
  setHidingAnination(Landroid/view/animation/Animation;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = SetHidingAnination(Android.Views.Animations.Animation)
  setShowingAnination(Landroid/view/animation/Animation;)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = SetShowingAnination(Android.Views.Animations.Animation)
  visible(Z)Lcom/tencent/mapsdk/raster/model/MarkerOptions; = Visible(bool)
com/tencent/mapsdk/raster/model/Polygon = Com.Tencent.Mapsdk.Raster.Model.Polygon
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getId()Ljava/lang/String; = Id
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  contains(Lcom/tencent/mapsdk/raster/model/LatLng;)Z = Contains(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  remove()V = Remove()
com/tencent/mapsdk/raster/model/PolygonOptions = Com.Tencent.Mapsdk.Raster.Model.PolygonOptions
  <init>()V = .ctor()
  getFillColor()I = FillColor
  isVisible()Z = IsVisible
  getPoints()Ljava/util/List; = Points
  getStrokeColor()I = StrokeColor
  getStrokeWidth()F = StrokeWidth
  getZIndex()F = ZIndex
  add(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = Add(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  add([Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = Add(params Com.Tencent.Mapsdk.Raster.Model.LatLng[])
  addAll(Ljava/lang/Iterable;)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = AddAll(Java.Lang.IIterable)
  fillColor(I)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = InvokeFillColor(int)
  strokeColor(I)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = InvokeStrokeColor(int)
  strokeWidth(F)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = InvokeStrokeWidth(float)
  zIndex(F)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = InvokeZIndex(float)
  visible(Z)Lcom/tencent/mapsdk/raster/model/PolygonOptions; = Visible(bool)
com/tencent/mapsdk/raster/model/Polyline = Com.Tencent.Mapsdk.Raster.Model.Polyline
  getColor()I = Color
  setColor(I)V = Color
  isDottedLine()Z = DottedLine
  setDottedLine(Z)V = DottedLine
  isGeodesic()Z = Geodesic
  setGeodesic(Z)V = Geodesic
  getId()Ljava/lang/String; = Id
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getWidth()F = Width
  setWidth(F)V = Width
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  remove()V = Remove()
com/tencent/mapsdk/raster/model/PolylineOptions = Com.Tencent.Mapsdk.Raster.Model.PolylineOptions
  <init>()V = .ctor()
  getArrowGap()F = ArrowGap
  getArrowTexture()Lcom/tencent/mapsdk/raster/model/BitmapDescriptor; = ArrowTexture
  getColor()I = Color
  getEdgeColor()I = EdgeColor
  getEdgeWidth()F = EdgeWidth
  isDottedLine()Z = IsDottedLine
  isGeodesic()Z = IsGeodesic
  isVisible()Z = IsVisible
  getPoints()Ljava/util/List; = Points
  getWidth()F = Width
  getZIndex()F = ZIndex
  add(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = Add(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  add([Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = Add(params Com.Tencent.Mapsdk.Raster.Model.LatLng[])
  addAll(Ljava/lang/Iterable;)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = AddAll(Java.Lang.IIterable)
  geodesic(Z)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = Geodesic(bool)
  arrowGap(F)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeArrowGap(float)
  arrowTexture(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeArrowTexture(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor)
  color(I)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeColor(int)
  edgeColor(I)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeEdgeColor(int)
  edgeWidth(F)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeEdgeWidth(float)
  width(F)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeWidth(float)
  zIndex(F)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = InvokeZIndex(float)
  setDottedLine(Z)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = SetDottedLine(bool)
  visible(Z)Lcom/tencent/mapsdk/raster/model/PolylineOptions; = Visible(bool)
com/tencent/mapsdk/raster/model/QMapLanguage = Com.Tencent.Mapsdk.Raster.Model.QMapLanguage
  QMapLanguage_en = QMapLanguageEn
  QMapLanguage_zh = QMapLanguageZh
  getLanguageCode(Lcom/tencent/mapsdk/raster/model/QMapLanguage;)Ljava/lang/String; = GetLanguageCode(Com.Tencent.Mapsdk.Raster.Model.QMapLanguage)
  valueOf(Ljava/lang/String;)Lcom/tencent/mapsdk/raster/model/QMapLanguage; = ValueOf(string)
  values()[Lcom/tencent/mapsdk/raster/model/QMapLanguage; = Values()
com/tencent/mapsdk/raster/model/TencentMapOptions = Com.Tencent.Mapsdk.Raster.Model.TencentMapOptions
  <init>()V = .ctor()
  LOGO_POSITION_BOTTOM_LEFT = LogoPositionBottomLeft
  LOGO_POSITION_BOTTOM_RIGHT = LogoPositionBottomRight
  LOGO_POSITION_TOP_LEFT = LogoPositionTopLeft
  LOGO_POSITION_TOP_RIGHT = LogoPositionTopRight
  isHandDrawMapEnable()Z = IsHandDrawMapEnable
  enableHandDrawMap(Z)Lcom/tencent/mapsdk/raster/model/TencentMapOptions; = EnableHandDrawMap(bool)
com/tencent/mapsdk/raster/model/Tile = Com.Tencent.Mapsdk.Raster.Model.Tile
  <init>(III[B)V = .ctor(int, int, int, byte[])
  getZoom()I = Zoom
  getData()[B = GetData()
  getX()I = GetX()
  getY()I = GetY()
com/tencent/mapsdk/raster/model/TileOverlay = Com.Tencent.Mapsdk.Raster.Model.TileOverlay
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  clearTileCache()V = ClearTileCache()
  remove()V = Remove()
com/tencent/mapsdk/raster/model/TileOverlayOptions = Com.Tencent.Mapsdk.Raster.Model.TileOverlayOptions
  <init>()V = .ctor()
  getDiskCacheEnabled()Z = DiskCacheEnabled
  isVisible()Z = IsVisible
  getTileProvider()Lcom/tencent/mapsdk/raster/model/TileProvider; = TileProvider
  getZIndex()F = ZIndex
  diskCacheEnabled(Z)Lcom/tencent/mapsdk/raster/model/TileOverlayOptions; = InvokeDiskCacheEnabled(bool)
  tileProvider(Lcom/tencent/mapsdk/raster/model/TileProvider;)Lcom/tencent/mapsdk/raster/model/TileOverlayOptions; = InvokeTileProvider(Com.Tencent.Mapsdk.Raster.Model.ITileProvider)
  zIndex(F)Lcom/tencent/mapsdk/raster/model/TileOverlayOptions; = InvokeZIndex(float)
  visible(Z)Lcom/tencent/mapsdk/raster/model/TileOverlayOptions; = Visible(bool)
com/tencent/mapsdk/raster/model/TileProvider = Com.Tencent.Mapsdk.Raster.Model.ITileProvider
  NO_TILE = NoTile
  getTileHeight()I = TileHeight
  getTileWidth()I = TileWidth
  getTile(IIILcom/tencent/mapsdk/rastercore/tile/MapTile$MapSource;[Ljava/lang/Object;)Lcom/tencent/mapsdk/raster/model/Tile; = GetTile(int, int, int, Com.Tencent.Mapsdk.Rastercore.Tile.MapTile.MapSource, params Java.Lang.Object[])
com/tencent/mapsdk/raster/model/UrlTileProvider = Com.Tencent.Mapsdk.Raster.Model.UrlTileProvider
  <init>()V = .ctor()
  getTile(IIILcom/tencent/mapsdk/rastercore/tile/MapTile$MapSource;[Ljava/lang/Object;)Lcom/tencent/mapsdk/raster/model/Tile; = GetTile(int, int, int, Com.Tencent.Mapsdk.Rastercore.Tile.MapTile.MapSource, params Java.Lang.Object[])
  getTileUrl(III[Ljava/lang/Object;)Ljava/net/URL; = GetTileUrl(int, int, int, params Java.Lang.Object[])
com/tencent/mapsdk/raster/model/VisibleRegion = Com.Tencent.Mapsdk.Raster.Model.VisibleRegion
  <init>(ILcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLngBounds;)V = .ctor(int, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
  <init>(Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLngBounds;)V = .ctor(Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLngBounds)
  getFarLeft()Lcom/tencent/mapsdk/raster/model/LatLng; = FarLeft
  getFarRight()Lcom/tencent/mapsdk/raster/model/LatLng; = FarRight
  getLatLngBounds()Lcom/tencent/mapsdk/raster/model/LatLngBounds; = LatLngBounds
  getNearLeft()Lcom/tencent/mapsdk/raster/model/LatLng; = NearLeft
  getNearRight()Lcom/tencent/mapsdk/raster/model/LatLng; = NearRight
  getVersionCode()I = VersionCode
com/tencent/mapsdk/rastercore/tile/MapTile = Com.Tencent.Mapsdk.Rastercore.Tile.MapTile
  a()I = A()
  a(Landroid/graphics/Canvas;)Z = A(Android.Graphics.Canvas)
  a(Landroid/graphics/PointF;)V = A(Android.Graphics.PointF)
  a(Lcom/tencent/mapsdk/rastercore/tile/MapTile$MapSource;)V = A(Com.Tencent.Mapsdk.Rastercore.Tile.MapTile.MapSource)
  b(Lcom/tencent/mapsdk/rastercore/tile/MapTile$MapSource;)I = B(Com.Tencent.Mapsdk.Rastercore.Tile.MapTile.MapSource)
  c()V = C()
com/tencent/tencentmap/mapsdk/map/CameraUpdate = Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate
com/tencent/tencentmap/mapsdk/map/CameraUpdateFactory = Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdateFactory
  <init>()V = .ctor()
  newCameraPosition(Lcom/tencent/mapsdk/raster/model/CameraPosition;)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = NewCameraPosition(Com.Tencent.Mapsdk.Raster.Model.CameraPosition)
  newLatLng(Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = NewLatLng(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  newLatLngBounds(Lcom/tencent/mapsdk/raster/model/LatLngBounds;I)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = NewLatLngBounds(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds, int)
  newLatLngBounds(Lcom/tencent/mapsdk/raster/model/LatLngBounds;III)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = NewLatLngBounds(Com.Tencent.Mapsdk.Raster.Model.LatLngBounds, int, int, int)
  newLatLngZoom(Lcom/tencent/mapsdk/raster/model/LatLng;F)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = NewLatLngZoom(Com.Tencent.Mapsdk.Raster.Model.LatLng, float)
  scrollBy(FF)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ScrollBy(float, float)
  zoomBy(F)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ZoomBy(float)
  zoomBy(FLandroid/graphics/Point;)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ZoomBy(float, Android.Graphics.Point)
  zoomIn()Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ZoomIn()
  zoomOut()Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ZoomOut()
  zoomTo(F)Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate; = ZoomTo(float)
com/tencent/tencentmap/mapsdk/map/CancelableCallback = Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback
  onCancel()V = OnCancel()
  onFinish()V = OnFinish()
com/tencent/tencentmap/mapsdk/map/ItemizedOverlay = Com.Tencent.Tencentmap.Mapsdk.Map.ItemizedOverlay
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/graphics/drawable/Drawable;)V = .ctor(Android.Graphics.Drawables.Drawable)
  getCenter()Lcom/tencent/mapsdk/raster/model/GeoPoint; = Center
  getFocus()Lcom/tencent/tencentmap/mapsdk/map/OverlayItem; = Focus
  setFocus(Lcom/tencent/tencentmap/mapsdk/map/OverlayItem;)V = Focus
  getLastFocusedIndex()I = LastFocusedIndex
  getLatSpanE6()I = LatSpanE6
  getLonSpanE6()I = LonSpanE6
  isShadowEnable()Z = ShadowEnable
  setShadowEnable(Z)V = ShadowEnable
  boundCenter(Landroid/graphics/drawable/Drawable;)Landroid/graphics/drawable/Drawable; = BoundCenter(Android.Graphics.Drawables.Drawable)
  boundCenterBottom(Landroid/graphics/drawable/Drawable;)Landroid/graphics/drawable/Drawable; = BoundCenterBottom(Android.Graphics.Drawables.Drawable)
  createItem(I)Lcom/tencent/tencentmap/mapsdk/map/OverlayItem; = CreateItem(int)
  draw(Landroid/graphics/Canvas;Lcom/tencent/tencentmap/mapsdk/map/MapView;)V = Draw(Android.Graphics.Canvas, Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  getIndexToDraw(I)I = GetIndexToDraw(int)
  getItem(I)Lcom/tencent/tencentmap/mapsdk/map/OverlayItem; = GetItem(int)
  nextFocus(Z)Lcom/tencent/tencentmap/mapsdk/map/OverlayItem; = NextFocus(bool)
  onTap(I)Z = OnTap(int)
  populate()V = Populate()
  setDrawFocusedItem(Z)V = SetDrawFocusedItem(bool)
  setLastFocusedIndex(I)V = SetLastFocusedIndex(int)
  setOnFocusChangeListener(Lcom/tencent/tencentmap/mapsdk/map/ItemizedOverlay$OnFocusChangeListener;)V = SetOnFocusChangeListener(Com.Tencent.Tencentmap.Mapsdk.Map.ItemizedOverlay.IOnFocusChangeListener)
  size()I = Size()
com/tencent/tencentmap/mapsdk/map/MapActivity = Com.Tencent.Tencentmap.Mapsdk.Map.MapActivity
  <init>()V = .ctor()
  setMapView(Lcom/tencent/tencentmap/mapsdk/map/MapView;)V = SetMapView(Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
com/tencent/tencentmap/mapsdk/map/MapController = Com.Tencent.Tencentmap.Mapsdk.Map.MapController
  <init>(Lcom/tencent/tencentmap/mapsdk/map/MapView;)V = .ctor(Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  isAnimateEable()Z = AnimateEable
  setAnimateEable(Z)V = AnimateEable
  getProjection()Lcom/tencent/tencentmap/mapsdk/map/Projection; = Projection
  animateTo(Lcom/tencent/mapsdk/raster/model/GeoPoint;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.GeoPoint)
  animateTo(Lcom/tencent/mapsdk/raster/model/GeoPoint;Ljava/lang/Runnable;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Java.Lang.IRunnable)
  animateTo(Lcom/tencent/mapsdk/raster/model/GeoPoint;JLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  animateTo(Lcom/tencent/mapsdk/raster/model/LatLng;JLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.LatLng, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  getScreenShot(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnScreenShotListener;)V = GetScreenShot(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnScreenShotListener)
  getScreenShot(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnScreenShotListener;Landroid/graphics/Rect;)V = GetScreenShot(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnScreenShotListener, Android.Graphics.Rect)
  scrollBy(FF)V = ScrollBy(float, float)
  scrollBy(FFJLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = ScrollBy(float, float, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  setCenter(Lcom/tencent/mapsdk/raster/model/GeoPoint;)V = SetCenter(Com.Tencent.Mapsdk.Raster.Model.GeoPoint)
  setInfoWindowAdapter(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$InfoWindowAdapter;)V = SetInfoWindowAdapter(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IInfoWindowAdapter)
  setOnInfoWindowClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnInfoWindowClickListener;)V = SetOnInfoWindowClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnInfoWindowClickListener)
  setOnMapCameraChangeListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapCameraChangeListener;)V = SetOnMapCameraChangeListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapCameraChangeListener)
  setOnMapClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapClickListener;)V = SetOnMapClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapClickListener)
  setOnMapHitListener(Lcom/tencent/tencentmap/mapsdk/map/OnMapHitListener;)V = SetOnMapHitListener(Com.Tencent.Tencentmap.Mapsdk.Map.IOnMapHitListener)
  setOnMapLoadedListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapLoadedListener;)V = SetOnMapLoadedListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapLoadedListener)
  setOnMapLongClickLisener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapLongClickListener;)V = SetOnMapLongClickLisener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapLongClickListener)
  setOnMapPressClickLisener(Lcom/tencent/tencentmap/mapsdk/map/OnMapLongPressListener;)V = SetOnMapPressClickLisener(Com.Tencent.Tencentmap.Mapsdk.Map.IOnMapLongPressListener)
  setOnMarkerClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMarkerClickListener;)V = SetOnMarkerClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMarkerClickListener)
  setOnMarkerDragListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMarkerDraggedListener;)V = SetOnMarkerDragListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMarkerDraggedListener)
  setZoom(I)V = SetZoom(int)
  stopAnimation()V = StopAnimation()
  zoomIn()V = ZoomIn()
  zoomInFixing(II)V = ZoomInFixing(int, int)
  zoomOut()V = ZoomOut()
  zoomOutFixing(II)V = ZoomOutFixing(int, int)
  zoomToSpan(Lcom/tencent/mapsdk/raster/model/GeoPoint;Lcom/tencent/mapsdk/raster/model/GeoPoint;)V = ZoomToSpan(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Com.Tencent.Mapsdk.Raster.Model.GeoPoint)
  zoomToSpan(II)V = ZoomToSpan(int, int)
com/tencent/tencentmap/mapsdk/map/MapFragmentUtil = Com.Tencent.Tencentmap.Mapsdk.Map.MapFragmentUtil
  getLatitudeSpan()I = LatitudeSpan
  getLongitudeSpan()I = LongitudeSpan
  getMapCenter()Lcom/tencent/mapsdk/raster/model/LatLng; = MapCenter
  getMapController()Lcom/tencent/tencentmap/mapsdk/map/MapController; = MapController
  isSatellite()Z = Satellite
  setSatellite(Z)V = Satellite
  getScalePerPixel()F = ScalePerPixel
  getZoomLevel()I = ZoomLevel
  addCircle(Lcom/tencent/mapsdk/raster/model/CircleOptions;)Lcom/tencent/mapsdk/raster/model/Circle; = AddCircle(Com.Tencent.Mapsdk.Raster.Model.CircleOptions)
  addGroundOverlay(Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions;)Lcom/tencent/mapsdk/raster/model/GroundOverlay; = AddGroundOverlay(Com.Tencent.Mapsdk.Raster.Model.GroundOverlayOptions)
  addMarker(Lcom/tencent/mapsdk/raster/model/MarkerOptions;)Lcom/tencent/mapsdk/raster/model/Marker; = AddMarker(Com.Tencent.Mapsdk.Raster.Model.MarkerOptions)
  addOverlay(Lcom/tencent/mapsdk/raster/model/BitmapDescriptor;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/GroundOverlay; = AddOverlay(Com.Tencent.Mapsdk.Raster.Model.BitmapDescriptor, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng)
  addPolygon(Lcom/tencent/mapsdk/raster/model/PolygonOptions;)Lcom/tencent/mapsdk/raster/model/Polygon; = AddPolygon(Com.Tencent.Mapsdk.Raster.Model.PolygonOptions)
  addPolyline(Lcom/tencent/mapsdk/raster/model/PolylineOptions;)Lcom/tencent/mapsdk/raster/model/Polyline; = AddPolyline(Com.Tencent.Mapsdk.Raster.Model.PolylineOptions)
  clearAllOverlays()V = ClearAllOverlays()
  invalidate()V = Invalidate()
  moveCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;)V = MoveCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate)
  postInvalidate()V = PostInvalidate()
  refreshMap()V = RefreshMap()
  removeOverlay(Lcom/tencent/mapsdk/raster/model/IOverlay;)V = RemoveOverlay(Com.Tencent.Mapsdk.Raster.Model.IOverlay)
  setLogoPosition(I)V = SetLogoPosition(int)
  setPinchEnabeled(Z)V = SetPinchEnabeled(bool)
  setScaleControlsEnable(Z)V = SetScaleControlsEnable(bool)
  setScaleViewPosition(I)V = SetScaleViewPosition(int)
  setScrollGesturesEnabled(Z)V = SetScrollGesturesEnabled(bool)
com/tencent/tencentmap/mapsdk/map/MapView = Com.Tencent.Tencentmap.Mapsdk.Map.MapView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Lcom/tencent/mapsdk/raster/model/TencentMapOptions;)V = .ctor(Android.Content.Context, Com.Tencent.Mapsdk.Raster.Model.TencentMapOptions)
  getController()Lcom/tencent/tencentmap/mapsdk/map/MapController; = Controller
  isAppKeyAvailable()Z = IsAppKeyAvailable
  getLatitudeSpan()I = LatitudeSpan
  getLongitudeSpan()I = LongitudeSpan
  getMap()Lcom/tencent/tencentmap/mapsdk/map/TencentMap; = Map
  getMapCenter()Lcom/tencent/mapsdk/raster/model/LatLng; = MapCenter
  getMapController()Lcom/tencent/tencentmap/mapsdk/map/MapController; = MapController
  getMaxZoomLevel()I = MaxZoomLevel
  getMinZoomLevel()I = MinZoomLevel
  getProjection()Lcom/tencent/tencentmap/mapsdk/map/Projection; = Projection
  isSatellite()Z = Satellite
  setSatellite(Z)V = Satellite
  getScalePerPixel()F = ScalePerPixel
  getUiSettings()Lcom/tencent/tencentmap/mapsdk/map/UiSettings; = UiSettings
  getVersion()Ljava/lang/String; = Version
  getZoomLevel()I = ZoomLevel
  addCircle(Lcom/tencent/mapsdk/raster/model/CircleOptions;)Lcom/tencent/mapsdk/raster/model/Circle; = AddCircle(Com.Tencent.Mapsdk.Raster.Model.CircleOptions)
  addGroundOverlay(Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions;)Lcom/tencent/mapsdk/raster/model/GroundOverlay; = AddGroundOverlay(Com.Tencent.Mapsdk.Raster.Model.GroundOverlayOptions)
  addMarker(Lcom/tencent/mapsdk/raster/model/MarkerOptions;)Lcom/tencent/mapsdk/raster/model/Marker; = AddMarker(Com.Tencent.Mapsdk.Raster.Model.MarkerOptions)
  addOverlay(Landroid/graphics/Bitmap;Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;)Lcom/tencent/mapsdk/raster/model/GroundOverlay; = AddOverlay(Android.Graphics.Bitmap, Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng)
  addOverlay(Lcom/tencent/tencentmap/mapsdk/map/Overlay;)Z = AddOverlay(Com.Tencent.Tencentmap.Mapsdk.Map.Overlay)
  addPolygon(Lcom/tencent/mapsdk/raster/model/PolygonOptions;)Lcom/tencent/mapsdk/raster/model/Polygon; = AddPolygon(Com.Tencent.Mapsdk.Raster.Model.PolygonOptions)
  addPolyline(Lcom/tencent/mapsdk/raster/model/PolylineOptions;)Lcom/tencent/mapsdk/raster/model/Polyline; = AddPolyline(Com.Tencent.Mapsdk.Raster.Model.PolylineOptions)
  clearAllOverlays()V = ClearAllOverlays()
  layout()V = Layout()
  layout(Landroid/view/View;)V = Layout(Android.Views.View)
  moveCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;)V = MoveCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate)
  onCreate(Landroid/os/Bundle;)V = OnCreate(Android.OS.Bundle)
  onDestroy()V = OnDestroy()
  onDestroyView()V = OnDestroyView()
  onLowMemory()V = OnLowMemory()
  onPause()V = OnPause()
  onRestart()V = OnRestart()
  onResume()V = OnResume()
  onSaveInstanceState(Landroid/os/Bundle;)V = OnSaveInstanceState(Android.OS.Bundle)
  onStop()V = OnStop()
  refreshMap()V = RefreshMap()
  removeOverlay(Lcom/tencent/mapsdk/raster/model/IOverlay;)V = RemoveOverlay(Com.Tencent.Mapsdk.Raster.Model.IOverlay)
  setLogoPosition(I)V = SetLogoPosition(int)
  setPinchEnabeled(Z)V = SetPinchEnabeled(bool)
  setScalControlsEnable(Z)V = SetScalControlsEnable(bool)
  setScaleControlsEnable(Z)V = SetScaleControlsEnable(bool)
  setScaleViewPosition(I)V = SetScaleViewPosition(int)
  setScrollGesturesEnabled(Z)V = SetScrollGesturesEnabled(bool)
  stopAnimation()V = StopAnimation()
com/tencent/tencentmap/mapsdk/map/OnMapHitListener = Com.Tencent.Tencentmap.Mapsdk.Map.IOnMapHitListener
  onMapClick(Lcom/tencent/mapsdk/raster/model/LatLng;)V = OnMapClick(Com.Tencent.Mapsdk.Raster.Model.LatLng)
com/tencent/tencentmap/mapsdk/map/OnMapLongPressListener = Com.Tencent.Tencentmap.Mapsdk.Map.IOnMapLongPressListener
  onMapLongPress(Lcom/tencent/mapsdk/raster/model/LatLng;)V = OnMapLongPress(Com.Tencent.Mapsdk.Raster.Model.LatLng)
com/tencent/tencentmap/mapsdk/map/Overlay = Com.Tencent.Tencentmap.Mapsdk.Map.Overlay
  <init>()V = .ctor()
  id = Id
  isVisible = IsVisible
  mapView = MapView
  SHADOW_X_SKEW = ShadowXSkew
  SHADOW_Y_SCALE = ShadowYScale
  zIndex = ZIndex
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  checkInBounds()Z = CheckInBounds()
  destroy()V = Destroy()
  draw(Landroid/graphics/Canvas;)V = Draw(Android.Graphics.Canvas)
  draw(Landroid/graphics/Canvas;Lcom/tencent/tencentmap/mapsdk/map/MapView;)V = Draw(Android.Graphics.Canvas, Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  hashCodeRemote()I = HashCodeRemote()
  init(Lcom/tencent/tencentmap/mapsdk/map/MapView;)V = Init(Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  onEmptyTap(Lcom/tencent/mapsdk/raster/model/GeoPoint;)V = OnEmptyTap(Com.Tencent.Mapsdk.Raster.Model.GeoPoint)
  onLongPress(Lcom/tencent/mapsdk/raster/model/GeoPoint;Landroid/view/MotionEvent;Lcom/tencent/tencentmap/mapsdk/map/MapView;)Z = OnLongPress(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Android.Views.MotionEvent, Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  onRemoveOverlay()V = OnRemoveOverlay()
  onTap(Lcom/tencent/mapsdk/raster/model/GeoPoint;Lcom/tencent/tencentmap/mapsdk/map/MapView;)Z = OnTap(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  onTouchEvent(Landroid/view/MotionEvent;Lcom/tencent/tencentmap/mapsdk/map/MapView;)Z = OnTouchEvent(Android.Views.MotionEvent, Com.Tencent.Tencentmap.Mapsdk.Map.MapView)
  remove()V = Remove()
com/tencent/tencentmap/mapsdk/map/OverlayItem = Com.Tencent.Tencentmap.Mapsdk.Map.OverlayItem
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Lcom/tencent/mapsdk/raster/model/GeoPoint;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, string, string)
  boDragable = BoDragable
  CREATOR = Creator
  mPoint = MPoint
  mSnippet = MSnippet
  mTitle = MTitle
  isDragable()Z = Dragable
  setDragable(Z)V = Dragable
  getMarker()Landroid/graphics/drawable/Drawable; = Marker
  setMarker(Landroid/graphics/drawable/Drawable;)V = Marker
  getPoint()Lcom/tencent/mapsdk/raster/model/GeoPoint; = Point
  setPoint(Lcom/tencent/mapsdk/raster/model/GeoPoint;)V = Point
  getSnippet()Ljava/lang/String; = Snippet
  getTitle()Ljava/lang/String; = Title
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/tencent/tencentmap/mapsdk/map/Projection = Com.Tencent.Tencentmap.Mapsdk.Map.Projection
  getLatitudeSpan()I = LatitudeSpan
  getLongitudeSpan()I = LongitudeSpan
  getScalePerPixel()F = ScalePerPixel
  getVisibleRegion()Lcom/tencent/mapsdk/raster/model/VisibleRegion; = VisibleRegion
  distanceBetween(Lcom/tencent/mapsdk/raster/model/GeoPoint;Lcom/tencent/mapsdk/raster/model/GeoPoint;)D = DistanceBetween(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Com.Tencent.Mapsdk.Raster.Model.GeoPoint)
  distanceBetween(Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;)D = DistanceBetween(Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng)
  fromPixels(II)Lcom/tencent/mapsdk/raster/model/GeoPoint; = FromPixels(int, int)
  fromScreenLocation(Landroid/graphics/Point;)Lcom/tencent/mapsdk/raster/model/LatLng; = FromScreenLocation(Android.Graphics.Point)
  metersToEquatorPixels(F)F = MetersToEquatorPixels(float)
  metersToPixels(DD)F = MetersToPixels(double, double)
  toPixels(Lcom/tencent/mapsdk/raster/model/GeoPoint;Landroid/graphics/Point;)Landroid/graphics/Point; = ToPixels(Com.Tencent.Mapsdk.Raster.Model.GeoPoint, Android.Graphics.Point)
  toScreenLocation(Lcom/tencent/mapsdk/raster/model/LatLng;)Landroid/graphics/Point; = ToScreenLocation(Com.Tencent.Mapsdk.Raster.Model.LatLng)
com/tencent/tencentmap/mapsdk/map/TencentMap = Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap
  getErrorListener()Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnErrorListener; = ErrorListener
  setErrorListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnErrorListener;)V = ErrorListener
  isHandDrawMapEnable()Z = HandDrawMapEnable
  setHandDrawMapEnable(Z)V = HandDrawMapEnable
  isAppKeyAvailable()Z = IsAppKeyAvailable
  getMapCenter()Lcom/tencent/mapsdk/raster/model/LatLng; = MapCenter
  getMaxZoomLevel()I = MaxZoomLevel
  getMinZoomLevel()I = MinZoomLevel
  isSatelliteEnabled()Z = SatelliteEnabled
  setSatelliteEnabled(Z)V = SatelliteEnabled
  isTrafficEnabled()Z = TrafficEnabled
  setTrafficEnabled(Z)V = TrafficEnabled
  getVersion()Ljava/lang/String; = Version
  getZoomLevel()I = ZoomLevel
  addCircle(Lcom/tencent/mapsdk/raster/model/CircleOptions;)Lcom/tencent/mapsdk/raster/model/Circle; = AddCircle(Com.Tencent.Mapsdk.Raster.Model.CircleOptions)
  addGroundOverlay(Lcom/tencent/mapsdk/raster/model/GroundOverlayOptions;)Lcom/tencent/mapsdk/raster/model/GroundOverlay; = AddGroundOverlay(Com.Tencent.Mapsdk.Raster.Model.GroundOverlayOptions)
  addMarker(Lcom/tencent/mapsdk/raster/model/MarkerOptions;)Lcom/tencent/mapsdk/raster/model/Marker; = AddMarker(Com.Tencent.Mapsdk.Raster.Model.MarkerOptions)
  addPolygon(Lcom/tencent/mapsdk/raster/model/PolygonOptions;)Lcom/tencent/mapsdk/raster/model/Polygon; = AddPolygon(Com.Tencent.Mapsdk.Raster.Model.PolygonOptions)
  addPolyline(Lcom/tencent/mapsdk/raster/model/PolylineOptions;)Lcom/tencent/mapsdk/raster/model/Polyline; = AddPolyline(Com.Tencent.Mapsdk.Raster.Model.PolylineOptions)
  addTileOverlay(Lcom/tencent/mapsdk/raster/model/TileOverlayOptions;)Lcom/tencent/mapsdk/raster/model/TileOverlay; = AddTileOverlay(Com.Tencent.Mapsdk.Raster.Model.TileOverlayOptions)
  animateCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;)V = AnimateCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate)
  animateCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;Lcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = AnimateCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  animateCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;JLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = AnimateCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  animateTo(Lcom/tencent/mapsdk/raster/model/LatLng;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  animateTo(Lcom/tencent/mapsdk/raster/model/LatLng;Ljava/lang/Runnable;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.LatLng, Java.Lang.IRunnable)
  animateTo(Lcom/tencent/mapsdk/raster/model/LatLng;JLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = AnimateTo(Com.Tencent.Mapsdk.Raster.Model.LatLng, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  clearAllOverlays()V = ClearAllOverlays()
  clearCache()Z = ClearCache()
  getScreenShot(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnScreenShotListener;)V = GetScreenShot(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnScreenShotListener)
  getScreenShot(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnScreenShotListener;Landroid/graphics/Rect;)V = GetScreenShot(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnScreenShotListener, Android.Graphics.Rect)
  moveCamera(Lcom/tencent/tencentmap/mapsdk/map/CameraUpdate;)V = MoveCamera(Com.Tencent.Tencentmap.Mapsdk.Map.CameraUpdate)
  removeOverlay(Lcom/tencent/mapsdk/raster/model/IOverlay;)V = RemoveOverlay(Com.Tencent.Mapsdk.Raster.Model.IOverlay)
  scrollBy(FF)V = ScrollBy(float, float)
  scrollBy(FFJLcom/tencent/tencentmap/mapsdk/map/CancelableCallback;)V = ScrollBy(float, float, long, Com.Tencent.Tencentmap.Mapsdk.Map.ICancelableCallback)
  setCenter(Lcom/tencent/mapsdk/raster/model/LatLng;)V = SetCenter(Com.Tencent.Mapsdk.Raster.Model.LatLng)
  setInfoWindowAdapter(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$InfoWindowAdapter;)V = SetInfoWindowAdapter(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IInfoWindowAdapter)
  setLanguage(Lcom/tencent/mapsdk/raster/model/QMapLanguage;)V = SetLanguage(Com.Tencent.Mapsdk.Raster.Model.QMapLanguage)
  setOnInfoWindowClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnInfoWindowClickListener;)V = SetOnInfoWindowClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnInfoWindowClickListener)
  setOnMapCameraChangeListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapCameraChangeListener;)V = SetOnMapCameraChangeListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapCameraChangeListener)
  setOnMapClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapClickListener;)V = SetOnMapClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapClickListener)
  setOnMapLoadedListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapLoadedListener;)V = SetOnMapLoadedListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapLoadedListener)
  setOnMapLongClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMapLongClickListener;)V = SetOnMapLongClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMapLongClickListener)
  setOnMarkerClickListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMarkerClickListener;)V = SetOnMarkerClickListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMarkerClickListener)
  setOnMarkerDraggedListener(Lcom/tencent/tencentmap/mapsdk/map/TencentMap$OnMarkerDraggedListener;)V = SetOnMarkerDraggedListener(Com.Tencent.Tencentmap.Mapsdk.Map.TencentMap.IOnMarkerDraggedListener)
  setZoom(I)V = SetZoom(int)
  stopAnimation()V = StopAnimation()
  zoomIn()V = ZoomIn()
  zoomInFixing(II)V = ZoomInFixing(int, int)
  zoomOut()V = ZoomOut()
  zoomOutFixing(II)V = ZoomOutFixing(int, int)
  zoomToSpan(Lcom/tencent/mapsdk/raster/model/LatLng;Lcom/tencent/mapsdk/raster/model/LatLng;)V = ZoomToSpan(Com.Tencent.Mapsdk.Raster.Model.LatLng, Com.Tencent.Mapsdk.Raster.Model.LatLng)
  zoomToSpan(DD)V = ZoomToSpan(double, double)
com/tencent/tencentmap/mapsdk/map/UiSettings = Com.Tencent.Tencentmap.Mapsdk.Map.UiSettings
  LOGO_POSITION_CENTER_BOTTOM = LogoPositionCenterBottom
  LOGO_POSITION_CENTER_TOP = LogoPositionCenterTop
  LOGO_POSITION_LEFT_BOTTOM = LogoPositionLeftBottom
  LOGO_POSITION_LEFT_TOP = LogoPositionLeftTop
  LOGO_POSITION_RIGHT_BOTTOM = LogoPositionRightBottom
  LOGO_POSITION_RIGHT_TOP = LogoPositionRightTop
  SCALEVIEW_POSITION_CENTER_BOTTOM = ScaleviewPositionCenterBottom
  SCALEVIEW_POSITION_LEFT_BOTTOM = ScaleviewPositionLeftBottom
  SCALEVIEW_POSITION_RIGHT_BOTTOM = ScaleviewPositionRightBottom
  isAnimationEnabled()Z = AnimationEnabled
  setAnimationEnabled(Z)V = AnimationEnabled
  isScrollGesturesEnabled()Z = IsScrollGesturesEnabled
  isZoomGesturesEnabled()Z = IsZoomGesturesEnabled
  getLogoPosition()I = LogoPosition
  isScaleControlsEnabled()Z = ScaleControlsEnabled
  setScaleControlsEnabled(Z)V = ScaleControlsEnabled
  getScaleViewPosition()I = ScaleViewPosition
  setAllGesturesEnabled(Z)V = SetAllGesturesEnabled(bool)
  setLogoPosition(I)V = SetLogoPosition(int)
  setLogoPosition(I[I)V = SetLogoPosition(int, int[])
  setLogoScale(F)V = SetLogoScale(float)
  setScaleViewPosition(I)V = SetScaleViewPosition(int)
  setScrollGesturesEnabled(Z)V = SetScrollGesturesEnabled(bool)
  setZoomGesturesEnabled(Z)V = SetZoomGesturesEnabled(bool)
